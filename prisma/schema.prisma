generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model User {
  id            String         @id @default(uuid())
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  email         String         @unique(map: "User.email_unique")
  name          String?
  phoneNumber   String?
  telegram      String?
  instagram     String?
  role          String
  courses       Course[]
  subscriptions Subscription[] @relation("UserSubscriptions")
  subscribers   Subscription[] @relation("UserSubscribers")
  transactions  Transaction[]  @relation("UserTransactions")
  sales         Transaction[]  @relation("UserSales")
}

model Subscription {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  authorId  String
  courseId  String
  status    String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user      User     @relation("UserSubscriptions", fields: [userId], references: [id], onDelete: Cascade)
  author    User     @relation("UserSubscribers", fields: [authorId], references: [id], onDelete: Cascade)
}

model Course {
  id            String         @id @default(uuid())
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  authorId      String
  name          String
  description   String
  price         Int
  image         String
  category      String
  author        User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  subscriptions Subscription[]
  transactions  Transaction[]
}

model Transaction {
  id                String    @id @default(uuid())
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  userId            String
  courseId          String
  authorId          String
  bankName          String
  bankAccountNumber String
  bankAccountName   String
  amount            Int
  datetime          DateTime?
  status            String
  user              User      @relation("UserTransactions", fields: [userId], references: [id], onDelete: Cascade)
  author            User      @relation("UserSales", fields: [authorId], references: [id], onDelete: Cascade)
  course            Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
}
